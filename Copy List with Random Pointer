/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    RandomListNode *copyRandomList(RandomListNode *head) {
        // write your code here
        if ( head == NULL)
            return NULL;
        
        RandomListNode * node = head;
        while (node){
            RandomListNode * tempt = new RandomListNode (node -> label);
            tempt -> next = node -> next;
            node -> next = tempt;
            node = tempt -> next;
        }
        
        node = head;
        while (node){
            
            if (node -> random != NULL)
                node -> next -> random = node -> random -> next;
            
            node = node -> next -> next;
        }
        
        node = head;
        RandomListNode* dup = head == NULL? NULL:head->next;
        while (node){
            RandomListNode * tempt = node -> next;
            node -> next = tempt -> next;
            
             if (node -> next)    
                tempt -> next = node -> next -> next;
            node =  node -> next;
        }
        
        return dup;
        
    }
};
