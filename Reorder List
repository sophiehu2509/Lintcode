/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @return: void
     */
    void reorderList(ListNode *head) {
        // write your code here
        if (head  == NULL)
            return;
       
        if ( head -> next == NULL )
            return;
        
        ListNode * slow = head;
        ListNode * fast = head -> next;
        while (fast && fast -> next){
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        
        ListNode * cur = slow -> next;
        //Cut linklist into two parts
        slow -> next  = NULL;
        //reverse the 2nd part
        ListNode * h2 = reverse (cur);
        
        //Insert reversed linklist into orignial linklist
        ListNode * h1= head;
        ListNode * move;
        ListNode * rev;
        while (h1 && h2){
            move = h1 -> next;
            rev = h2 -> next;
            //tempt = tempt -> next;
            h1 -> next = h2; 
            h2 -> next = move;
            h1  = move;
            h2 = rev;
        }
    }
    
     ListNode * reverse (ListNode *head){
        if (!head)
            return head;
        if (head -> next == NULL)
            return head;
            
        ListNode * dummy = new ListNode((head -> val) - 1);
        dummy -> next = head;
        
        ListNode * cur = head -> next;
        ListNode * pos = head;
        ListNode * pre = head;
        pre -> next = NULL;
        
        while (cur){
            pos = cur -> next;
            dummy -> next = cur;
            cur -> next = pre;
            pre = cur;
            cur = pos;
            
        }
   
        return  dummy -> next;  
        
    }
};
