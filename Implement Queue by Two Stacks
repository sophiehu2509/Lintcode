class Queue {
public:
    stack<int> stack1;
    stack<int> stack2;

    Queue() {
        // do intialization if necessary
    }

    void push(int element) {
        // write your code here
        if (stack1.empty() && stack2.empty())
            stack1.push(element);
        else if (!stack1.empty())
            stack1.push(element);
        else if (!stack2.empty())
            stack2.push(element);
            
    }
    
    int pop() {
        // write your code here
        if (stack1.empty())
        {
            int len = stack2.size();
            while (len > 1)
            {
                stack1.push(stack2.top());
                stack2.pop();
                len --;
            }
            
            int res = stack2.top();
            stack2.pop();
            
            while (!stack1.empty())
            {
                stack2.push(stack1.top());
                stack1.pop();
            }
            
            return res;
        }
        else if (stack2.empty())
        {
            int len = stack1.size();
            while (len > 1)
            {
                stack2.push(stack1.top());
                stack1.pop();
                len --;
            }
            
            int res = stack1.top();
            stack1.pop();
            
            while (!stack2.empty())
            {
                stack1.push(stack2.top());
                stack2.pop();
            }
            
            return res;
            
        }
    }

    int top() {
        // write your code here
        if (stack1.empty())
        {
           int len = stack2.size();
            while (len > 1)
            {
                stack1.push(stack2.top());
                stack2.pop();
                len --;
            }
            
            int res = stack2.top();
            
            while (!stack1.empty())
            {
                stack2.push(stack1.top());
                stack1.pop();
            }
            
            return res;
        }
        else 
        {
            int len = stack1.size();
            while (len > 1)
            {
                stack2.push(stack1.top());
                stack1.pop();
                len --;
            }
            
            int res = stack1.top();
            
            while (!stack2.empty())
            {
                stack1.push(stack2.top());
                stack2.pop();
            }
            
            return res;
        }
           
    }
};
