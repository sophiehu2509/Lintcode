/**
 * Definition of SegmentTreeNode:
 * class SegmentTreeNode {
 * public:
 *     int start, end, max;
 *     SegmentTreeNode *left, *right;
 *     SegmentTreeNode(int start, int end, int max) {
 *         this->start = start;
 *         this->end = end;
 *         this->max = max;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The maximum number in the interval [start, end]
     */
    int query(SegmentTreeNode *root, int start, int end) {
        // write your code here
        
        int p1 = root ->start;
        int p2 = root-> end;
        int mid = (p1 + p2)/2;
        
        if (p1 == start && p2 == end)
        {
            return root-> max;
        }
        else if (start == mid && end > mid)
            return max(query (root->left, start, start), query(root->right, mid+1, end));
        if (end == mid)
            return query(root->left, start, mid);

        if (start < mid && end > mid)
            return max(query(root->left, start, mid), query(root->right, mid + 1, end));
        if (start > mid )
            return query(root->right, start, end);
        if (end < mid)
            return query(root->left, start, end);
        
    }
};
