class Solution {
public:
    /**
     * @param s: A string
     * @return: A list of lists of string
     */
    vector<vector<string>> partition(string s) {
        // write your code here
        vector<string> vec;
        vector<vector<string>> res;
        helper(res, vec, s);
         
        return res;
    }
    
    void helper(vector<vector<string>> & res, vector<string> &vec, string s)
    {
        if (s.size() == 0)
        {
            res.push_back(vec);
            return;
        }
        
        for (int i = 1; i<=s.size(); i++)
        {
            string st = s.substr(0, i);
            if (isVal(st)){
                vec.push_back(st);
                string sts = s.substr(i, s.size() - i +1);
                helper(res, vec, sts);
                vec.pop_back();
            }
        }
        
    }
    
    bool isVal (string s)
    {
        if (s.size() ==1)
            return true;
            
        int i = 0;
        int j = s.size() - 1;
        while (i < j)
        {
            if (s[i] != s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
};
