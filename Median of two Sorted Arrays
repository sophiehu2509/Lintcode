class Solution {
public:
    /**
     * @param A: An integer array.
     * @param B: An integer array.
     * @return: a double whose format is *.5 or *.0
     */
    double findMedianSortedArrays(vector<int> A, vector<int> B) {
        // write your code here
    

        int m = A.size();
        int n = B.size();
        if (m > n) 
            return findMedianSortedArrays(B, A);
        int start = 0;
        int end = m;
        int i = 0;
        int j = 0;
        double left;
        double right;
        
        while (start <= end)
        {
            i = (start + end )/2;
            j = (m + n + 1)/2 - i;

            if (i < m && j > 0 && A[i] < B[j - 1])
            {
                start = i + 1;
            }
            else if (i > 0 && j < n && B[j] < A[i-1])
                end = i - 1;
            else {
                if (i == 0) 
                {
                    left = nums2[j - 1];
                }
                else if (j == 0)
                    left = A[i - 1];
                else 
                    left = max(A[i - 1], nums2[j - 1]);
                    
                break;
            }
            
        }
        //if the total number of the two array is odd.
        if ((m + n)%2 == 1)
            return left;
            
        if (i == m) 
        {
            right = B[j];
        }    
        else if (j == n)
        {
            right = A[i];
        }
        else right = min(A[i], B[j]);
        
        return (left + right)/2.;
        


        
    }
};
