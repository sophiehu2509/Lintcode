/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
     
     struct compare {
         bool operator () (const ListNode * l,  const ListNode * r){
             return l -> val > r -> val;
         }
     };
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        priority_queue < ListNode *, vector <ListNode *>, compare > vec;
        ListNode * dummy = new ListNode (-1);
        ListNode * tempt = dummy;
        for ( int i = 0; i<lists.size(); i++){
            if (lists[i]){
                    vec.push(lists[i]);
            }
    
        }
        
        while (!vec.empty()){
             tempt -> next =  vec.top();
             tempt = tempt -> next;
             if (tempt -> next)
                vec.push(tempt -> next);
             vec.pop();
        }
        
        return dummy -> next;
    }
};
