class Solution {
public:
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
     
    struct node {
         node (int _value, int _pos): value (_value), pos (_pos) {}
         int value, pos;
        bool operator< (const node &o) const {
            return (value < o.value || value == o.value && pos < o.pos);
        }
     };
     
     /*struct node {
        node(int _value, int _pos):value(_value), pos(_pos) {}
        int value, pos;
        bool operator<(const node &o) const{
            return (value < o.value || value == o.value && pos < o.pos);
        }
    };*/
     
    vector<int> subarraySumClosest(vector<int> nums){
        // write your code here
            
        vector <node> vec;
        vector <int> result(2);
        int sum = 0;
        
        for (int i = 0; i< nums.size(); i++)
        {
            sum += nums[i];
            node n (sum, i);
            vec.push_back(n);
        }
        sort (vec.begin(),vec.end());
        int ans = 0x7fffffff;
        for ( int j=0; j<vec.size() - 1; j++)
        {
            if (abs(vec[j].value - vec[j + 1].value) < ans){
                ans = abs(vec[j].value - vec[j + 1].value);
                result[0] = min(vec[j].pos, vec[j+1].pos) + 1;
                result[1] = max(vec[j].pos, vec[j+1].pos);
            }
        }
        return result;
    }
};
