vector<vector<int> > permuteUnique(vector<int> &nums) {
        // write your code here
        vector<int> vec;
        vector<vector<int> > res;
        
        if (nums.size()==0)
            return res;
            
        int n=nums.size(); 
        vector<bool> visited(n, false);
        sort(nums.begin(), nums.end());
        dfs(nums, res, visited, vec, 0);
        return res;
    }
    void dfs(vector<int> &nums, vector<vector<int> > & res,  vector<bool> & visited, vector<int> & vec, int pos){
        
        if (vec.size() == nums.size()){
            res.push_back(vec);
            return;
        }
        
        for (int i = 0; i < nums.size(); i++){
                    
            if (visited[i] == false){
                if (i != 0 && nums[i-1] == nums[i] && visited[i-1] == true)
                   continue;
                
                visited[i] = true;
                vec.push_back(nums[i]);
                dfs(nums, res, visited, vec, i + 1);
                visited[i] = false;
                vec.pop_back();
            }
        }    
    }
