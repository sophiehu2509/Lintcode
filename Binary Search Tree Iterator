/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 * Example of iterate a tree:
 * BSTIterator iterator = BSTIterator(root);
 * while (iterator.hasNext()) {
 *    TreeNode * node = iterator.next();
 *    do something for node
 */
class BSTIterator {
public:
    stack<TreeNode *> s;
    
    //@param root: The root of binary tree.
    BSTIterator(TreeNode *root) {
        // write your code here
        if (!root) 
            return;
            
        while (root)
        {
            s.push(root);
            root = root->left;
        }
    }

    //@return: True if there has next node, or false
    bool hasNext() {
        // write your code here
        if (!s.empty())
            return true;
            
        return false;
    }
    
    //@return: return next node
    TreeNode* next() {
        // write your code here
        TreeNode* tempt = s.top();

            s.pop();
            if (tempt->right)
            {
                s.push(tempt->right);
                TreeNode* t = tempt->right->left;
                while (t)
                {
                    s.push(t);
                    t = t->left;
                }
            }

        return tempt;
    }
};
